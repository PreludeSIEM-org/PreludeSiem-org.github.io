---
bindings/java/Makefile.am          |   42 +++++++++++++++++++++++++++++++++++
bindings/java/build.xml            |   23 +++++++++++++++++++
bindings/java/libpreludecpp-java.i |   43 ++++++++++++++++++++++++++++++++++++
bindings/java/rebuild.sh           |   10 ++++++++
bindings/java/testapp/build.sh     |    2 +
bindings/java/testapp/run.sh       |    2 +
bindings/java/testapp/test.java    |   34 ++++++++++++++++++++++++++++
7 files changed, 156 insertions(+), 0 deletions(-)
create mode 100644 bindings/java/Makefile.am
create mode 100644 bindings/java/build.xml
create mode 100644 bindings/java/libpreludecpp-java.i
create mode 100644 bindings/java/rebuild.sh
create mode 100755 bindings/java/testapp/build.sh
create mode 100755 bindings/java/testapp/run.sh
create mode 100644 bindings/java/testapp/test.java

diff --git a/bindings/java/Makefile.am b/bindings/java/Makefile.am
new file mode 100644
index 0000000..c5b6819
--- /dev/null
+++ b/bindings/java/Makefile.am
@@ -0,0 +1,42 @@
+if HAVE_EASY_BINDINGS
+if HAVE_JAVA
+
+EXTRA_DIST = libpreludecpp-java.i PreludeEasy.cxx
+
+all-am: java-build
+
+java-build: PreludeEasy.cxx  PreludeEasy.o
+	$(JAVAC) com/prelude/easy/*.java
+	ant compile && ant jar
+
+install-exec-hook:
+	cp libpreludejava.so /usr/local/lib
+	ldconfig
+	cp build/jar/PreludeEasy.jar /usr/share/java
+
+uninstall-hook:
+	rm -f /usr/local/lib/libpreludejava.so
+	ldconfig
+	rm -f /usr/share/java/PreludeEasy.jar
+
+
+PreludeEasy.o: PreludeEasy.cxx 
+	$(CXX) -I $(top_srcdir)/bindings/c++/include -c -I $(top_srcdir)/src/include/ -I $(top_srcdir)/src/libprelude-error/ -I$(top_srcdir) -I $(top_srcdir)/libmissing/ -fPIC PreludeEasy.cxx 
+	$(CXX) -shared PreludeEasy.o $(top_srcdir)/bindings/c++/.libs/libpreludecpp.so -o libpreludejava.so
+
+PreludeEasy.cxx: $(top_srcdir)/bindings/c++/include/*.hxx $(top_srcdir)/bindings/libpreludecpp.i libpreludecpp-java.i 
+if HAVE_SWIG
+	$(SWIG) -c++ -I$(top_srcdir)/bindings -I$(top_srcdir)/bindings/c++/include -I$(top_srcdir)/src/include -I$(top_srcdir)/src/libprelude-error -java -package com.prelude.easy -outdir com/prelude/easy -o $@ ../libpreludecpp.i
+endif
+
+
+clean-local:
+	rm -f com/prelude/easy/*.class com/prelude/easy/*.java
+	rm -f PreludeEasy.o libpreludejava.so PreludeEasy.cxx
+	rm -f Makefile.old
+	ant clean
+	rm -f testapp/*.class
+endif
+endif
+
+-include $(top_srcdir)/git.mk
diff --git a/bindings/java/build.xml b/bindings/java/build.xml
new file mode 100644
index 0000000..2067063
--- /dev/null
+++ b/bindings/java/build.xml
@@ -0,0 +1,23 @@
+<project>
+    <target name="clean">
+        <delete dir="build"/>
+    </target>
+
+    <target name="compile">
+        <mkdir dir="build/classes"/>
+        <javac srcdir="./com" destdir="build/classes" debug="on" debuglevel="lines,vars,source" />
+    </target>
+
+    <target name="jar">
+        <mkdir dir="build/jar"/>
+        <jar destfile="build/jar/PreludeEasy.jar" basedir="build/classes">
+            <manifest>
+            </manifest>
+        </jar>
+    </target>
+
+    <target name="run">
+        <java jar="build/jar/PreludeEasy.jar" fork="true"/>
+    </target>
+
+</project>
diff --git a/bindings/java/libpreludecpp-java.i b/bindings/java/libpreludecpp-java.i
new file mode 100644
index 0000000..e0a4c37
--- /dev/null
+++ b/bindings/java/libpreludecpp-java.i
@@ -0,0 +1,43 @@
+%module preludejava 
+
+%rename (String) *::operator const std::string() const;
+%rename (String) *::operator const char*;
+
+%ignore *::operator int() const;
+%ignore *::operator double() const;
+%ignore *::operator long() const;
+%ignore *::operator >> const;
+%ignore *::operator <;
+%ignore *::operator >;
+%ignore *::operator ==;
+%ignore *::operator <=;
+%ignore *::operator >=;
+%ignore *::operator !=;
+%ignore *::operator =;
+
+%typemap(throws, throws="java.io.IOException") Prelude::PreludeError {
+  jclass excep = jenv->FindClass("java/io/IOException");
+  if (excep)
+    jenv->ThrowNew(excep, $1.what());
+  return $null;
+}
+
+%fragment("TransitionFunc", "header") {
+
+static ssize_t _cb_java_read(prelude_io_t *fd, void *buf, size_t size)
+{
+        ssize_t ret;
+        FILE *f = (FILE *) prelude_io_get_fdptr(fd);
+
+        ret = fread(buf, 1, size, f);
+        if ( ret < 0 )
+                ret = prelude_error_from_errno(errno);
+
+        else if ( ret == 0 )
+                ret = prelude_error(PRELUDE_ERROR_EOF);
+
+        return ret;
+}
+
+}
+
diff --git a/bindings/java/rebuild.sh b/bindings/java/rebuild.sh
new file mode 100644
index 0000000..e5626f5
--- /dev/null
+++ b/bindings/java/rebuild.sh
@@ -0,0 +1,10 @@
+#!/bin/bash -x
+
+make clean
+rm PreludeEasy.cxx PreludeEasy.so PreludeEasy.o preludejava.o
+make
+g++ -I ../c++/include -c -I ../../src/include/ -I ../../src/libprelude-error/ -I../../ -I ../../libmissing/ -fPIC PreludeEasy.cxx 
+g++ -shared /usr/local/lib/libpreludecpp.so PreludeEasy.o preludejava.o -o libpreludejava.so
+sudo cp libpreludejava.so /usr/local/lib/
+sudo ldconfig
+cp build/jar/PreludeEasy.jar ~/
diff --git a/bindings/java/testapp/build.sh b/bindings/java/testapp/build.sh
new file mode 100755
index 0000000..3013d97
--- /dev/null
+++ b/bindings/java/testapp/build.sh
@@ -0,0 +1,2 @@
+#!/bin/sh -x
+javac -cp /usr/share/java/PreludeEasy.jar test.java
diff --git a/bindings/java/testapp/run.sh b/bindings/java/testapp/run.sh
new file mode 100755
index 0000000..bb9bc32
--- /dev/null
+++ b/bindings/java/testapp/run.sh
@@ -0,0 +1,2 @@
+#!/bin/bash
+java -cp /usr/share/java/PreludeEasy.jar:. test
diff --git a/bindings/java/testapp/test.java b/bindings/java/testapp/test.java
new file mode 100644
index 0000000..b2058b1
--- /dev/null
+++ b/bindings/java/testapp/test.java
@@ -0,0 +1,34 @@
+import com.prelude.easy.ClientEasy;
+import com.prelude.easy.IDMEF;
+
+public class test {
+
+  static {
+    try {
+      System.loadLibrary("preludejava");
+    } catch (UnsatisfiedLinkError e) {
+      System.err.println("Native code library failed to load. " + e);
+      System.exit(1);
+    }
+  }
+
+	private static ClientEasy c;
+
+	public static void main(String argv[]){
+		com.prelude.easy.PreludeEasy.prelude_init();
+		c= new ClientEasy("prelude-java-agent");
+		try {
+			c.Start();
+			System.out.println("Creating IDMEF msg");
+			IDMEF msg = new IDMEF();		
+			System.out.println("Setting attribs...");
+			msg.Set("alert.source(0).node.address(0).address","192.168.1.1");		
+			msg.Set("alert.target(0).node.address(0).address","192.168.1.2");
+			System.out.println("Sending msg...");
+			c.SendIDMEF(msg);
+		} catch (Exception exception){
+			System.out.println(exception.toString());
+			exception.printStackTrace();
+		}
+	}
+}
-- 
1.6.3.3
